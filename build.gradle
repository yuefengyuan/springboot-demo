buildscript {
    ext {
        springBootVersion = '1.5.12.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
//apply plugin: 'eclipse'
apply plugin: 'idea'
//apply plugin: 'war'
apply plugin: 'org.springframework.boot'

jar {
    baseName = 'demo'
    version = '1.0.0'
}

sourceCompatibility = 1.8

bootRun {
    addResources = true
}

configurations {
    mybatisGenerator
}

def getDbProperties = {
    def properties = new Properties()
    file("src/main/resources/mybatis-generator/jdbc.properties").withInputStream { inputStream ->
        properties.load(inputStream)
    }
    properties;
}

task mybatisGenerate << {
    def properties = getDbProperties()
    ant.properties['targetProject'] = projectDir.path
    ant.properties['driverClass'] = properties.getProperty("jdbc.driverClassName")
    ant.properties['connectionURL'] = properties.getProperty("jdbc.url")
    ant.properties['userId'] = properties.getProperty("jdbc.username")
    ant.properties['password'] = properties.getProperty("jdbc.password")
    ant.properties['src_main_java'] = sourceSets.main.java.srcDirs[0].path
    ant.properties['src_main_resources'] = sourceSets.main.resources.srcDirs[0].path
    ant.properties['modelPackage'] = properties.getProperty("package.model")
    ant.properties['mapperPackage'] = properties.getProperty("package.mapper")
    ant.properties['sqlMapperPackage'] = properties.getProperty("package.xml")
    ant.taskdef(
            name: 'mbgenerator',
            classname: 'org.mybatis.generator.ant.GeneratorAntTask',
            classpath: configurations.mybatisGenerator.asPath
    )
    ant.mbgenerator(overwrite: true,
            configfile: 'src/main/resources/mybatis/generatorConfig.xml', verbose: true) {
        propertyset {
            propertyref(name: 'targetProject')
            propertyref(name: 'userId')
            propertyref(name: 'driverClass')
            propertyref(name: 'connectionURL')
            propertyref(name: 'password')
            propertyref(name: 'src_main_java')
            propertyref(name: 'src_main_resources')
            propertyref(name: 'modelPackage')
            propertyref(name: 'mapperPackage')
            propertyref(name: 'sqlMapperPackage')
        }
    }
}



repositories {
    mavenCentral()
}

dependencies {

    //common
    compile("org.apache.commons:commons-lang3:3.6")

    //boot
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.boot:spring-boot-starter-data-jpa")

    // jdbc mysql
    compile("mysql:mysql-connector-java")

    //thymeleaf
    compile("org.springframework.boot:spring-boot-starter-thymeleaf")
    compile("org.thymeleaf.extras:thymeleaf-extras-java8time")

    //tools
    compileOnly("org.springframework.boot:spring-boot-devtools")

    // redis
    compile("org.springframework.boot:spring-boot-starter-data-redis")

    //mybatis
    compile("org.mybatis.spring.boot:mybatis-spring-boot-starter:1.3.1")

    mybatisGenerator "org.mybatis.generator:mybatis-generator-core:1.3.2"
    mybatisGenerator "mysql:mysql-connector-java:5.1.46"
    mybatisGenerator "tk.mybatis:mapper:3.3.9"

    // ui
    compile("org.webjars.bower:bootstrap:3.3.7")
    compile("org.webjars.bower:jquery:3.2.1")
    compile("org.webjars:vue:1.0.24")
    compile("org.webjars.bower:vue-resource:0.7.0")

    //test
    testCompile("org.seleniumhq.selenium:selenium-java:3.4.0")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("junit:junit:4.12")
}



